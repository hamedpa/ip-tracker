{"version":3,"sources":["InfoBox.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","ipInfo","active","cases","total","isRed","props","console","log","Card","onClick","className","CardContent","Typography","variant","gutterBottom","Country","country","CountryCode","Object","keys","map","item","color","icon","L","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","Map","lat","lon","casesType","center","zoom","TileLayer","attribution","url","Marker","position","App","useState","ip","setIp","setIpInfo","setLat","setLon","locationData","setLocationData","lng","mapCenter","mapZoom","useEffect","a","length","fetch","then","response","json","data","IPv4","catch","err","message","formattedData","countryCode","City","city","Continent","Zip","zip","RegionName","regionName","ISP","isp","Coordinates","Time","timezone","ipAddress","hostname","provider","org","ASN","as","String","address","assign","boundingbox","licence","country_code","osm_type","getCountriesData","TextField","id","value","onChange","e","target","label","Boolean","window","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.191daf4c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\nimport Flag from 'react-flagkit';\n\nfunction InfoBox({ title, ipInfo, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${isRed && \"infoBox--red\"\n        }`}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>\n          {title}\n        </Typography>\n        <div>\n          {ipInfo ? ipInfo.Country && <Flag country={ipInfo ? ipInfo.CountryCode : \"Loading Data ...\"} /> : \"Loading Data ...\"}\n        \n        </div>\n\n        {ipInfo ? Object.keys(ipInfo).map((item) => {\n          if(ipInfo[item] && ipInfo[item] !== \"undefined\") {\n            return <Typography className=\"infoBox__total\" color=\"textSecondary\">{item}: {ipInfo[item]}</Typography>\n          }\n          return [];\n        }) : ''}\n\n    \n      </CardContent>\n    </Card >\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer, Marker } from \"react-leaflet\";\nimport L from 'leaflet';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png'\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png'\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png'\n\nimport \"./Map.css\";\nconst icon = L.icon({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow\n});\n\nfunction Map({ ipInfo, lat, lon, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={[lat,lon]} zoom={29}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={[lat,lon]} icon={icon}>\n          {/* <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n          </Popup> */}\n        </Marker>\n        {/* {showDataOnMap(countries, casesType)} */}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  TextField\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [ip, setIp] = useState('51.15.80.14');\n\n  const [ipInfo, setIpInfo] = useState({});\n  const [lat, setLat] = useState(34.80746);\n  const [lon, setLon] = useState(-40.4796);\n  const [locationData, setLocationData] = useState([]);\n  const [casesType] = useState(\"cases\");\n  const [mapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom] = useState(3);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      if(!Object.keys(ipInfo).length > 0){\n        fetch(`https://geolocation-db.com/json/`)\n          .then((response) => response.json())\n          .then((data) => {\n            setIp(data.IPv4);\n            \n          }).catch((err) => {\n              console.log(err);\n              setIpInfo({message: \"there is no data for this IP\"});\n              setLocationData({message: \"there is no data for this IP\"});\n  \n          });\n      }\n      fetch(`http://ip-api.com/json/${ip}`)\n        .then((response) => response.json())\n        .then((data) => {\n          const formattedData = {\n            Country: `${data.country} (${data.countryCode})`,\n            City: data?.city,\n            Continent: `${data.country})`,\n            Zip: data?.zip,\n            RegionName: data?.regionName,\n            ISP: data?.isp,\n            Coordinates: `${data.lat} (lat) / ${data.lon} (long)`,\n            Time: `${data.timezone}`,\n            CountryCode: data.countryCode,\n            ipAddress: ip,\n            hostname: ip,\n            provider: data.org,\n            ASN: data.as,\n            lat: String(data.lat),\n            lon: String(data.lon)\n          };\n\n          setIpInfo(formattedData);\n          if(formattedData.lat !== \"undefined\" && formattedData.lon !== \"undefined\") {\n            setLat(formattedData.lat);\n            setLon(formattedData.lon);\n          }\n\n          const urlLocation =  \"https://nominatim.openstreetmap.org/search?q=\"+formattedData.lat+\"+\"+formattedData.lon+\"&format=json&polygon=1&addressdetails=1\";\n      \n          fetch(urlLocation)\n            .then((response) => response.json())\n            .then((data) => {\n              console.log(data[0].address);\n              const locationData = Object.assign(data[0].address,data[0]);\n              delete locationData.address;\n              delete locationData.boundingbox;\n              delete locationData.licence\n              delete locationData.country_code\n              delete locationData.country\n              delete locationData.osm_type              \n              delete locationData.icon              \n              delete locationData.lat              \n              delete locationData.lon              \n              setLocationData(data);\n            }).catch((err)=>{\n              console.log('try to fetch data ...');\n            });\n        }).catch((err) => {\n            console.log(err);\n            setIpInfo({message: \"there is no data for this IP\"});\n            setLocationData({message: \"there is no data for this IP\"});\n\n        });\n    };\n    getCountriesData();\n  }, [ip, ipInfo]);\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Modern IP address Tracker</h1>\n          <TextField id=\"outlined-basic-required\"  value={ip} onChange={e => setIp(e.target.value)} label=\"IP address\" variant=\"outlined\" />\n\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            title=\"ip address data\"\n            ipInfo={ipInfo}\n          />\n          <InfoBox\n            title=\"location\"\n            ipInfo={locationData.length > 0 ? locationData[0].address : ''}\n          />\n        </div>\n        <Map\n          ipInfo={ipInfo}\n          lat={lat}\n          lon={lon}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}